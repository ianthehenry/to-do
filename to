#!/usr/bin/env janet

(use sh)
(import cmd)

(def todo-file (string/format "%s/scratch/todo" (os/getenv "HOME")))

(def char-to-state {" " :todo "x" :done "-" :skip})
(def state-to-char (tabseq [[k v] :pairs char-to-state] v k))

(defn not- [f] (fn [x] (not (f x))))

(defn parse-state [char]
  (assert (char-to-state char)
    (string/format "unknown state %s" char)))

(defn print-state [state]
  (assert (state-to-char state)
    (string/format "unknown state %s" state)))

(defn trim-lines [str]
  (as-> str $
    (string/split "\n" $)
    (map string/trim $)
    (drop-while empty? $)
    (take-while (not- empty?) $)
    (string/join $ "\n")))

(def task-peg (peg/compile
  ~{:main (any (* :task (+ "\n" -1)))
    :task (replace
      (* "- ["(<- (to "]")) "] "(<- (to (+ "\n- [" -1))))
      ,|@{:state (parse-state $0) :text (trim-lines $1)})}))

(defn parse-tasks []
  (peg/match task-peg (slurp todo-file)))

(defn strikethrough [text] (string "\e[9m" text "\e[0m"))
(defn dim [text] (string "\e[2m" text "\e[0m"))

(defn replace-str [str char]
  (def buf (buffer str))
  (eachk i buf
    (put buf i char))
  buf)

(def cols (scan-number ($<_ tput cols)))

(defn print-task [{:state state :text text}]
  (def decorate
    (case state
      :done strikethrough
      :skip dim
      identity))

  (def prefix (string/format "- [%s] " (print-state state)))
  (def indent (replace-str prefix (chr " ")))
  (def wrap-width (- cols (length prefix)))
  (def wrapped-text ($< <,text fold -s -w ,wrap-width))
  (def lines (string/split "\n" wrapped-text))
  (eachp [i line] lines
    (printf "%s%s" (if (= i 0) prefix indent) (decorate line))))

(defn print-tasks [tasks]
  (each task (sort-by |(in $ :state) tasks)
    (print-task task)))

(defn first-word [str]
  (take-while |(not= $ (chr " ")) str))

(defn drop-last [list]
  (tuple/slice list 0 (- (length list) 1)))

(defn save-tasks [tasks]
  (def output @"")
  (each {:state state :text text} tasks
    (buffer/push-string output
      (string/format "- [%s] %s\n" (print-state state) text)))
  (def temp-file (string todo-file ".bup"))
  (spit temp-file output)
  ($ mv ,temp-file ,todo-file))

(defn change-state [old-state new-state]
  (def tasks (parse-tasks))
  (def input @"")

  (def old-state-pred
    (case (type old-state)
      :keyword |(= $ old-state)
      :tuple |(index-of $ old-state)
      :function old-state
      (error "unknown state predicate")))

  (var any-todos false)
  (loop [[i {:state state :text text}] :pairs tasks
         :when (old-state-pred state)]
    (set any-todos true)
    (buffer/push-string input (string i))
    (buffer/push-string input " ")
    (buffer/push-string input text)
    (buffer/push-byte input 0))
  (unless any-todos
    (print "nothing to do!")
    (os/exit 0))

  (def output @"")
  (def [exit-code] (run fzf --multi --print0 --with-nth "2.." --read0 <,input >,output))
  (def selections
    (case exit-code
      0 (drop-last (string/split "\0" output))
      1 []
      2 (error "fzf error")
      130 []
      (error "unknown error")))

  (each selection selections
    (def task-index (scan-number (first-word selection)))
    (def task (in tasks task-index))
    (set (task :state) new-state)
    (print-task task))
  (unless (empty? selections)
    (save-tasks tasks)))

(cmd/defn to-do [task (optional :string)]
  (if task
    ($ printf "- [ ] %s\n" ,task > (file/open todo-file :a))
    (print-tasks (parse-tasks))))

(cmd/defn to-edit []
  (def editor (string/split " " (or (os/getenv "VISUAL") (os/getenv "EDITOR") "vim")))
  ($ ,;editor ,todo-file))

(cmd/main (cmd/group
  do to-do
  undo (cmd/fn [] (change-state |(not= $ :todo) :todo))
  did (cmd/fn [] (change-state :todo :done))
  dont (cmd/fn [] (change-state :todo :skip))
  edit to-edit))
